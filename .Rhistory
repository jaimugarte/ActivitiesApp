runApp('app2.R')
runApp()
runApp()
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
credentials <- data.frame(
user = '',
password = '',
# comment = c("alsace", "auvergne", "bretagne"), %>%
stringsAsFactors = FALSE
)
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
server <- function(input, output){
v = reactiveValues(df_sheet = NULL)
sheet <- reactive({
infile <- input$datafile
if (is.null(infile)) {
# User has not uploaded a file yet
return(NULL)
}
tbl = read.csv(infile$datapath, stringsAsFactors = FALSE)
v$df_sheet = tbl
tbl
})
# reactive dataframe object
observeEvent(input$goButton, {
isolate({
if(!is.null(selected_row_id())) {
if (selected_row_id() > 0){
v$df_sheet[selected_row_id(),1] <- input$truefalse
}
}
})
}, ignoreNULL = FALSE)
# selectable data table
output$sheet <- renderDataTable({
v$df_sheet[,c(1,2)]
}, selection = "single")
# selected row ID from data table
selected_row_id <- reactive({
input$sheet_rows_selected
})
# text of article
output$text<-renderText({sheet()[input$sheet_rows_selected, "lede"]})
# Save when click the button
observeEvent(input$save, {
write.csv(v$df_sheet, paste('data/',input$save_file, sep=''), row.names = FALSE)
})
# download button
output$download_data <- downloadHandler(
filename = "updated_data.csv",
content = function(file) {
write.csv(v$df_sheet, paste('data/', file, sep=''), row.names = FALSE)
}
)
}
shinyApp(ui = ui, server = server)
install.packages("plotly")
library(plotly)
library(shiny)
ui <- shinyUI(fluidPage(
plotlyOutput("myPlot"),
actionButton("regen","Generate New Points")
))
server <- shinyServer(function(input, output) {
n <- 100
rv <- reactiveValues(m=data.frame(x=rnorm(n),y=rnorm(n)))
observeEvent(input$regen,{
rv$m <- data.frame(x=rnorm(n),y=rnorm(n))
})
output$myPlot <- renderPlotly({
plot_ly() %>%  add_markers(data=rv$m,x=~x,y=~y  )
})
})
shinyApp(ui, server)
runApp('app2.R')
runApp()
runApp('app2.R')
runApp('app2.R')
cred <- read.csv('credentials.csv')
cred <- read.csv('credentials.csv')
write.csv(cread, row.names = F)
write.csv(cred, row.names = F)
cred <- read.csv('credentials.csv')
cred
write.csv(cred, row.names = F)
cred <- read.csv('credentials.csv')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
?actionButton
?reactiveVal
if (interactive()) {
ui <- fluidPage(
actionButton("minus", "-1"),
actionButton("plus", "+1"),
br(),
textOutput("value")
)
# The comments below show the equivalent logic using reactiveValues()
server <- function(input, output, session) {
value <- reactiveVal(0)       # rv <- reactiveValues(value = 0)
observeEvent(input$minus, {
newValue <- value() - 1     # newValue <- rv$value - 1
value(newValue)             # rv$value <- newValue
})
observeEvent(input$plus, {
newValue <- value() + 1     # newValue <- rv$value + 1
value(newValue)             # rv$value <- newValue
})
output$value <- renderText({
value()                     # rv$value
})
}
shinyApp(ui, server)
}
strtrim(' asd ')
?strtrim
gsub("[[:space:]]", "", 'sd ')
gsub("[[:space:]]", "", ' sd ')
gsub("[[:space:]]", "", ' s d ')
?delay
delay(5)
base::delay(5)
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
?write.csv
source('app_functions.R')
cred <- read.csv('credentials.csv')
credentials <- reactiveValues(DF = data.frame(
user = cred$user,
password = cred$password,
stringsAsFactors = FALSE
))
shinyApp(
ui = secure_app(head_auth = tags$script(inactivity),
dashboardPagePlus(md = FALSE,
dashboardHeaderPlus(
fixed = TRUE,
title = tagList(
span(class = "logo-lg", "Activities App")),
enable_rightsidebar = FALSE),
dashboardSidebar(
sidebarMenu(
menuItem(text = "Tables", tabName = "tables", icon = icon("table"),
menuSubItem('Activities', tabName = 'activities',icon = icon('hiking')),
menuSubItem('Participants',tabName = 'participants',icon = icon('portrait')),
menuSubItem('Locations',tabName = 'locations',icon = icon('home')),
menuSubItem('Organizers',tabName = 'organizers',icon = icon('users')),
menuSubItem('Activity types',tabName = 'types',icon = icon('football-ball')),
menuSubItem('Targets',tabName = 'targets',icon = icon('bullseye'))
),
menuItem(text = "Tools", tabName = "tools", icon = icon("hammer")),
menuItem(text = "Help", tabName = "helpbar",icon = icon("question")),
menuItem(text = "Settings", tabName = "settings", icon = icon("gears"),
menuSubItem('Database',tabName = 'database',icon = icon('database')),
menuSubItem('Login',tabName = 'login', icon = icon('key'))),
actionButton("button", "Update", icon = icon("spinner"),class = "btn-success")
)
),
dashboardBody(
h4('Sangria'), # Sangria
# use a bit of shinyEffects
setShadow(class = "dropdown-menu"),
setShadow(class = "box"),
shiny::tags$head(
shiny::tags$style(
rel = "stylesheet",
type = "text/css",
href = "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/qtcreator_dark.min.css"
),
shiny::tags$script(
src = "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js")
),
tabItems(tabItem(tabName = "activities", fluidRow(box(uiOutput('activities'), width = 12))),
tabItem(tabName = "participants", fluidRow(box(uiOutput('participants'), width = 12))),
tabItem(tabName = "targets", fluidRow(box(uiOutput('targets'), width = 12))),
tabItem(tabName = "organizers", fluidRow(box(uiOutput('organizers'), width = 12))),
tabItem(tabName = "types", fluidRow(box(uiOutput('types'), width = 12))),
tabItem(tabName = "locations", fluidRow(box(uiOutput('locations'), width = 12))),
tabItem(tabName = 'database', fluidRow(box(
h5("Click the button below to download the database in .sqlite format."),
h5("SQLite is a public-domain, single-user, very light-weight database engine that implements a decent subset of the SQL 92 standard."),
h5("You can open the file dowloaded using this webpage: https://sqliteonline.com/"),
h5("From this website you can view the tables of the database and download them in .csv format"),
downloadButton('downloadData', 'Download .sqlite database'),
width = 12))),
tabItem(tabName = "login", fluidRow(box(
title = 'Reset password:',
h5("Suggestion: use the user 'admin'"),
passwordInput("passwordOld", "Current Password:"),
passwordInput("passwordNew1", "New Password:"),
passwordInput("passwordNew2", "Repeat New Password:"),
actionButton("reset", "Reset", icon = icon("fingerprint")),
textOutput("message"),
width = 8)))
)
),
title = "shinyDashboardPlus",
footer = dashboardFooter(
left_text = "By Jaime Ugarte",
right_text = "Montreal, 2020"
)
)),
server <- function(input, output, session) {
result_auth <- secure_server(check_credentials = check_credentials(credentials$DF))
output$res_auth <- renderPrint({
reactiveValuesToList(result_auth)
})
# classic app
reactiveBooks <- reactiveVal({getBooks()})
eventReactive(Activities$thedata, {
reactiveBooks(Activities$thedata)
})
participants <- getParticipants()
places <- getPlaces()
organizers <- getOrganizers()
types <- getTypes()
targets <- getTargets()
typesR <- reactiveVal(getTypes()$Type)
targetsR <- reactiveVal(getTargets()$Target)
placesR <- reactiveVal(getPlaces()$Place)
organizersR <- reactiveVal(getOrganizers()$Organizer)
participantsR <- reactiveVal(getParticipants()$participant)
priestsR <- reactiveVal(getParticipants()$participant[getParticipants()$priest == 'yes'])
Activities <- dtedit(input, output,
name = 'activities',
thedata = reactiveBooks,
edit.cols = c('Type','For','Location','Organizer','Start', 'End', 'Director','Assistant1','Assistant2','Secretary','Priest','Participants'),
edit.label.cols = c('Activity type','For','Location','Organizer', 'Starting Date','Ending date','Director','Assistant director 1','Assistant director 2','Secretary','Priest','Participants'),
input.types = c(Type = 'selectInputReactive',
For = 'selectInputReactive',
Location = 'selectInputReactive',
Organizer  = 'selectInputReactive',
Director = 'selectInputReactive',
Assistant1 = 'selectInputReactive',
Assistant2 = 'selectInputReactive',
Secretary = 'selectInputReactive',
Priest = 'selectInputReactive',
Participants= 'selectInputMultipleReactive'),
input.choices = list(Type = 'types.list',
For = 'targets.list',
Location = 'places.list',
Organizer = 'organizers.list',
Director = 'participants.list',
Assistant1 = 'participants.list',
Assistant2 = 'participants.list',
Secretary = 'participants.list',
Priest = 'priests.list',
Participants = 'participants.list'),
input.choices.reactive = list(organizers.list = organizersR,
types.list = typesR,
places.list = placesR,
participants.list = participantsR,
priests.list = priestsR,
targets.list = targetsR),
callback.update = books.update.callback,
callback.insert = books.insert.callback,
callback.delete = books.delete.callback,
defaultPageLength = 15)
observeEvent(input$button, {
typesR(getTypes()$Type)
targetsR(getTargets()$Target)
placesR(getPlaces()$Place)
organizersR(getOrganizers()$Organizer)
participantsR(getParticipants()$participant)
priestsR(getParticipants()$participant[getParticipants()$priest == 'yes'])
})
dtedit(input, output,
name = 'participants',
thedata = participants,
edit.cols = c('participant', 'priest', 'phone', 'email', 'diet', 'notes'),
edit.label.cols = c('Participant', 'Is he a priest?', 'Phone number', 'Email','Need special diet?','Other comments'),
input.types = c(participant = 'textInput',
phone = 'textInput',
email = 'textInput',
diet = 'textInput',
priest = 'selectInput',
notes = 'textAreaInput'),
input.choices = list(priest = c('no','yes')),
view.cols = names(participants)[names(participants) != 'id'],
callback.update = participants.update.callback,
callback.insert = participants.insert.callback,
callback.delete = participants.delete.callback,
defaultPageLength = 15)
dtedit(input, output,
name = 'locations',
thedata = places,
edit.cols = c('Place'),
edit.label.cols = c('Place'),
input.types = c(Place = 'textInput'),
callback.update = places.update.callback,
callback.insert = places.insert.callback,
callback.delete = places.delete.callback,
defaultPageLength = 15)
dtedit(input, output,
name = 'organizers',
thedata = organizers,
edit.cols = c('Organizer'),
edit.label.cols = c('Organizer'),
input.types = c(Organizer = 'textInput'),
callback.update = organizers.update.callback,
callback.insert = organizers.insert.callback,
callback.delete = organizers.delete.callback,
defaultPageLength = 15)
dtedit(input, output,
name = 'targets',
thedata = targets,
edit.cols = c('Target'),
edit.label.cols = c('Target'),
input.types = c(Target = 'textInput'),
callback.update = targets.update.callback,
callback.insert = targets.insert.callback,
callback.delete = targets.delete.callback,
defaultPageLength = 15)
dtedit(input, output,
name = 'types',
thedata = types,
edit.cols = c('Type'),
edit.label.cols = c('Type'),
input.types = c(Type = 'textInput'),
callback.update = types.update.callback,
callback.insert = types.insert.callback,
callback.delete = types.delete.callback,
defaultPageLength = 15)
output$downloadData <- downloadHandler(
# This function returns a string which tells the client
# browser what name to use when saving the file.
filename = paste0(Sys.Date(),'_database','.sqlite'),
# This function should write data to a file given to it by
# the argument 'file'.
content <- function(file) {
file.copy("books.sqlite", file)
},
contentType = "application/x-sqlite3"
)
mensaje <- reactiveVal('')
observeEvent(input$reset,{
if(input$passwordOld != credentials$DF$password){
mensaje('Wrong current password')
} else if(input$passwordNew1 != input$passwordNew2){
mensaje('You have written different passwords')
} else if(input$passwordNew1 == input$passwordOld) {
mensaje('The New password is the same as the old one.')
} else if(gsub("[[:space:]]", "", input$passwordNew1)  %in% c('',NA)) {
mensaje('The password cannot be empty')
} else {
credentials$DF <- data.frame(user = 'admin',password = input$passwordNew1)
NewCreds <- data.frame(user = 'admin', password = credentials$DF)
write.csv(NewCreds,'credentials.csv', row.names = F)
mensaje('Password succesfully reset!')
}
})
output$message <- renderText({
mensaje()                     # rv$value
})
}
)
runApp('app2.R')
install.packages('ReporteRs')
install.packages("wordR")
install.packages("WordR")
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
##### Load tables data.frames as a SQLite database
conn <- dbConnect(RSQLite::SQLite(), "books.sqlite")
res <- dbSendQuery(conn, "SELECT * FROM participants")
participants <- dbFetch(res)
View(participants)
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
?selectInput
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
getBooks()
getBooks()$id
class(getBooks()$id)
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
names(getBooks())
getBooks()
class(getBooks()$Start)
year(getBooks()$Start)
format(getBooks()$Start,'%Y')
class(format(getBooks()$Start,'%Y'))
class(format(getBooks()$Start,'%d'))
format(getBooks()$Start,'%d')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
knitr::opts_chunk$set(echo = TRUE)
p <- readRDS("params.RDS")
p
runApp('app2.R')
for(i in 1:10):{i}
# Reading info
p <- readRDS("params.RDS")
View(p)
library(htmltools)
part = p$c..John.Smith....Paco.Perez.Martinez....Wenceslao.Martinez...
list(part)
tagList(list(part))
tagList(part)
tagList(unlist(list(part)))
tagList(names(p)[ncol(p)])
tagList(names(p)[ncol(p)])
print(tagList(names(p)[ncol(p)]))
View(p)
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
?globalVariables
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
params2 <- readRDS('params.RDS')
View(params2)
View(params2)
runApp('app2.R')
getBooks()
runApp('app2.R')
dbSendQuery(conn, query)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(readr)
REP <- read_csv("C:/Users/jaime/Downloads/Datos históricos BBVA.csv",
col_types = cols(Apertura = col_character(),
`Máximo` = col_character(), `Mínimo` = col_character(),
Último = col_character()))
library(stringr)
REP$timestamp <- as.Date(REP$Fecha, format = '%d.%m.%Y')
REP$close <- as.numeric(str_replace_all(REP$Último, pattern = '[,]','.'))
REP$open <- as.numeric(str_replace_all(REP$Apertura, pattern = '[,]','.'))
REP$high <- as.numeric(str_replace_all(REP$Máximo, pattern = '[,]','.'))
REP$low <- as.numeric(str_replace_all(REP$Mínimo, pattern = '[,]','.'))
library(dplyr)
REP <- REP %>% select(timestamp, close, high, low)
write.csv(x = REP, file = 'C:/Users/jaime/Google Drive/PERSONAL/TFM2/data/BBVA_WJ.csv', row.names = F)
library(readr)
REP <- read_csv("C:/Users/jaime/Downloads/Datos históricos BBVA.csv",
col_types = cols(Apertura = col_character(),
`Máximo` = col_character(), `Mínimo` = col_character(),
Último = col_character()))
library(stringr)
REP$timestamp <- as.Date(REP$Fecha, format = '%d.%m.%Y')
REP$close <- as.numeric(str_replace_all(REP$Último, pattern = '[,]','.'))
REP$open <- as.numeric(str_replace_all(REP$Apertura, pattern = '[,]','.'))
REP$high <- as.numeric(str_replace_all(REP$Máximo, pattern = '[,]','.'))
REP$low <- as.numeric(str_replace_all(REP$Mínimo, pattern = '[,]','.'))
library(dplyr)
REP <- REP %>% select(timestamp, close, high, low)
write.csv(x = REP, file = 'C:/Users/jaime/Google Drive/PERSONAL/TFM2/data/BBVA_WJ.csv', row.names = F)
